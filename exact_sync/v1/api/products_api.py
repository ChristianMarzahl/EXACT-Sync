# coding: utf-8

"""
    EXACT - API

    API to interact with the EXACT Server  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from exact_sync.v1.api_client import ApiClient


class ProductsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_product(self, **kwargs):  # noqa: E501
        """create_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_product(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body108 body:
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_product_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_product_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_product_with_http_info(self, **kwargs):  # noqa: E501
        """create_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_product_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body108 body:
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_product" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/administration/products/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_product(self, **kwargs):  # noqa: E501
        """create_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_product(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :param str description:
        :param int team:
        :param int creator:
        :param list[int] imagesets:
        :param list[int] annotationtype_set:
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_product_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_product_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_product_with_http_info(self, **kwargs):  # noqa: E501
        """create_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_product_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :param str description:
        :param int team:
        :param int creator:
        :param list[int] imagesets:
        :param list[int] annotationtype_set:
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'description', 'team', 'creator', 'imagesets', 'annotationtype_set']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_product" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/administration/products/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_product(self, **kwargs):  # noqa: E501
        """create_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_product(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :param str description:
        :param int team:
        :param int creator:
        :param list[int] imagesets:
        :param list[int] annotationtype_set:
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_product_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_product_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_product_with_http_info(self, **kwargs):  # noqa: E501
        """create_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_product_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name:
        :param str description:
        :param int team:
        :param int creator:
        :param list[int] imagesets:
        :param list[int] annotationtype_set:
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'description', 'team', 'creator', 'imagesets', 'annotationtype_set']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_product" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/administration/products/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destroy_product(self, id, **kwargs):  # noqa: E501
        """destroy_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_product(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str id2: id
        :param str name: name
        :param str name__contains: name__contains
        :param str description: description
        :param str description__contains: description__contains
        :param str team: team
        :param str creator: creator
        :param str imagesets: imagesets
        :param str annotationtype: annotationtype
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.destroy_product_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.destroy_product_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def destroy_product_with_http_info(self, id, **kwargs):  # noqa: E501
        """destroy_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_product_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str id2: id
        :param str name: name
        :param str name__contains: name__contains
        :param str description: description
        :param str description__contains: description__contains
        :param str team: team
        :param str creator: creator
        :param str imagesets: imagesets
        :param str annotationtype: annotationtype
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'name', 'name__contains', 'description', 'description__contains', 'team', 'creator', 'imagesets', 'annotationtype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `destroy_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'name__contains' in params:
            query_params.append(('name__contains', params['name__contains']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'description__contains' in params:
            query_params.append(('description__contains', params['description__contains']))  # noqa: E501
        if 'team' in params:
            query_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            query_params.append(('imagesets', params['imagesets']))  # noqa: E501
        if 'annotationtype' in params:
            query_params.append(('annotationtype', params['annotationtype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/administration/products/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_products(self, **kwargs):  # noqa: E501
        """list_products  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_products(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str id: id
        :param str name: name
        :param str name__contains: name__contains
        :param str description: description
        :param str description__contains: description__contains
        :param str team: team
        :param str creator: creator
        :param str imagesets: imagesets
        :param str annotationtype: annotationtype
        :return: Products
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_products_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_products_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_products_with_http_info(self, **kwargs):  # noqa: E501
        """list_products  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_products_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str id: id
        :param str name: name
        :param str name__contains: name__contains
        :param str description: description
        :param str description__contains: description__contains
        :param str team: team
        :param str creator: creator
        :param str imagesets: imagesets
        :param str annotationtype: annotationtype
        :return: Products
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'id', 'name', 'name__contains', 'description', 'description__contains', 'team', 'creator', 'imagesets', 'annotationtype']  # noqa: E501
        all_params.append('omit')
        all_params.append('fields')        
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_products" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'name__contains' in params:
            query_params.append(('name__contains', params['name__contains']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'description__contains' in params:
            query_params.append(('description__contains', params['description__contains']))  # noqa: E501
        if 'team' in params:
            query_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            query_params.append(('imagesets', params['imagesets']))  # noqa: E501
        if 'annotationtype' in params:
            query_params.append(('annotationtype', params['annotationtype']))  # noqa: E501
        if 'omit' in params:
            query_params.append(('omit', params['omit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/administration/products/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Products',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partial_update_product(self, id, **kwargs):  # noqa: E501
        """partial_update_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_product(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param Body114 body:
        :param str id2: id
        :param str name2: name
        :param str name__contains: name__contains
        :param str description2: description
        :param str description__contains: description__contains
        :param str team2: team
        :param str creator2: creator
        :param str imagesets2: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partial_update_product_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.partial_update_product_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def partial_update_product_with_http_info(self, id, **kwargs):  # noqa: E501
        """partial_update_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_product_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param Body114 body:
        :param str id2: id
        :param str name2: name
        :param str name__contains: name__contains
        :param str description2: description
        :param str description__contains: description__contains
        :param str team2: team
        :param str creator2: creator
        :param str imagesets2: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'id2', 'name2', 'name__contains', 'description2', 'description__contains', 'team2', 'creator2', 'imagesets2', 'annotationtype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partial_update_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `partial_update_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name2' in params:
            query_params.append(('name', params['name2']))  # noqa: E501
        if 'name__contains' in params:
            query_params.append(('name__contains', params['name__contains']))  # noqa: E501
        if 'description2' in params:
            query_params.append(('description', params['description2']))  # noqa: E501
        if 'description__contains' in params:
            query_params.append(('description__contains', params['description__contains']))  # noqa: E501
        if 'team2' in params:
            query_params.append(('team', params['team2']))  # noqa: E501
        if 'creator2' in params:
            query_params.append(('creator', params['creator2']))  # noqa: E501
        if 'imagesets2' in params:
            query_params.append(('imagesets', params['imagesets2']))  # noqa: E501
        if 'annotationtype' in params:
            query_params.append(('annotationtype', params['annotationtype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/administration/products/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partial_update_product(self, id, **kwargs):  # noqa: E501
        """partial_update_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_product(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str name:
        :param str description:
        :param int team:
        :param int creator:
        :param list[int] imagesets:
        :param list[int] annotationtype_set:
        :param str id2: id
        :param str name2: name
        :param str name__contains: name__contains
        :param str description2: description
        :param str description__contains: description__contains
        :param str team2: team
        :param str creator2: creator
        :param str imagesets2: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partial_update_product_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.partial_update_product_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def partial_update_product_with_http_info(self, id, **kwargs):  # noqa: E501
        """partial_update_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_product_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str name:
        :param str description:
        :param int team:
        :param int creator:
        :param list[int] imagesets:
        :param list[int] annotationtype_set:
        :param str id2: id
        :param str name2: name
        :param str name__contains: name__contains
        :param str description2: description
        :param str description__contains: description__contains
        :param str team2: team
        :param str creator2: creator
        :param str imagesets2: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'description', 'team', 'creator', 'imagesets', 'annotationtype_set', 'id2', 'name2', 'name__contains', 'description2', 'description__contains', 'team2', 'creator2', 'imagesets2', 'annotationtype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partial_update_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `partial_update_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name2' in params:
            query_params.append(('name', params['name2']))  # noqa: E501
        if 'name__contains' in params:
            query_params.append(('name__contains', params['name__contains']))  # noqa: E501
        if 'description2' in params:
            query_params.append(('description', params['description2']))  # noqa: E501
        if 'description__contains' in params:
            query_params.append(('description__contains', params['description__contains']))  # noqa: E501
        if 'team2' in params:
            query_params.append(('team', params['team2']))  # noqa: E501
        if 'creator2' in params:
            query_params.append(('creator', params['creator2']))  # noqa: E501
        if 'imagesets2' in params:
            query_params.append(('imagesets', params['imagesets2']))  # noqa: E501
        if 'annotationtype' in params:
            query_params.append(('annotationtype', params['annotationtype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/administration/products/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partial_update_product(self, id, **kwargs):  # noqa: E501
        """partial_update_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_product(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str name:
        :param str description:
        :param int team:
        :param int creator:
        :param list[int] imagesets:
        :param list[int] annotationtype_set:
        :param str id2: id
        :param str name2: name
        :param str name__contains: name__contains
        :param str description2: description
        :param str description__contains: description__contains
        :param str team2: team
        :param str creator2: creator
        :param str imagesets2: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partial_update_product_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.partial_update_product_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def partial_update_product_with_http_info(self, id, **kwargs):  # noqa: E501
        """partial_update_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_product_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str name:
        :param str description:
        :param int team:
        :param int creator:
        :param list[int] imagesets:
        :param list[int] annotationtype_set:
        :param str id2: id
        :param str name2: name
        :param str name__contains: name__contains
        :param str description2: description
        :param str description__contains: description__contains
        :param str team2: team
        :param str creator2: creator
        :param str imagesets2: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'description', 'team', 'creator', 'imagesets', 'annotationtype_set', 'id2', 'name2', 'name__contains', 'description2', 'description__contains', 'team2', 'creator2', 'imagesets2', 'annotationtype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partial_update_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `partial_update_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name2' in params:
            query_params.append(('name', params['name2']))  # noqa: E501
        if 'name__contains' in params:
            query_params.append(('name__contains', params['name__contains']))  # noqa: E501
        if 'description2' in params:
            query_params.append(('description', params['description2']))  # noqa: E501
        if 'description__contains' in params:
            query_params.append(('description__contains', params['description__contains']))  # noqa: E501
        if 'team2' in params:
            query_params.append(('team', params['team2']))  # noqa: E501
        if 'creator2' in params:
            query_params.append(('creator', params['creator2']))  # noqa: E501
        if 'imagesets2' in params:
            query_params.append(('imagesets', params['imagesets2']))  # noqa: E501
        if 'annotationtype' in params:
            query_params.append(('annotationtype', params['annotationtype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/administration/products/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_product(self, id, **kwargs):  # noqa: E501
        """retrieve_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_product(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str id2: id
        :param str name: name
        :param str name__contains: name__contains
        :param str description: description
        :param str description__contains: description__contains
        :param str team: team
        :param str creator: creator
        :param str imagesets: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_product_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_product_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_product_with_http_info(self, id, **kwargs):  # noqa: E501
        """retrieve_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_product_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str id2: id
        :param str name: name
        :param str name__contains: name__contains
        :param str description: description
        :param str description__contains: description__contains
        :param str team: team
        :param str creator: creator
        :param str imagesets: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'name', 'name__contains', 'description', 'description__contains', 'team', 'creator', 'imagesets', 'annotationtype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'name__contains' in params:
            query_params.append(('name__contains', params['name__contains']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'description__contains' in params:
            query_params.append(('description__contains', params['description__contains']))  # noqa: E501
        if 'team' in params:
            query_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            query_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            query_params.append(('imagesets', params['imagesets']))  # noqa: E501
        if 'annotationtype' in params:
            query_params.append(('annotationtype', params['annotationtype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/administration/products/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_product(self, id, **kwargs):  # noqa: E501
        """update_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param Body111 body:
        :param str id2: id
        :param str name2: name
        :param str name__contains: name__contains
        :param str description2: description
        :param str description__contains: description__contains
        :param str team2: team
        :param str creator2: creator
        :param str imagesets2: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_product_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_product_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_product_with_http_info(self, id, **kwargs):  # noqa: E501
        """update_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param Body111 body:
        :param str id2: id
        :param str name2: name
        :param str name__contains: name__contains
        :param str description2: description
        :param str description__contains: description__contains
        :param str team2: team
        :param str creator2: creator
        :param str imagesets2: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'id2', 'name2', 'name__contains', 'description2', 'description__contains', 'team2', 'creator2', 'imagesets2', 'annotationtype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name2' in params:
            query_params.append(('name', params['name2']))  # noqa: E501
        if 'name__contains' in params:
            query_params.append(('name__contains', params['name__contains']))  # noqa: E501
        if 'description2' in params:
            query_params.append(('description', params['description2']))  # noqa: E501
        if 'description__contains' in params:
            query_params.append(('description__contains', params['description__contains']))  # noqa: E501
        if 'team2' in params:
            query_params.append(('team', params['team2']))  # noqa: E501
        if 'creator2' in params:
            query_params.append(('creator', params['creator2']))  # noqa: E501
        if 'imagesets2' in params:
            query_params.append(('imagesets', params['imagesets2']))  # noqa: E501
        if 'annotationtype' in params:
            query_params.append(('annotationtype', params['annotationtype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/administration/products/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_product(self, id, **kwargs):  # noqa: E501
        """update_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str name:
        :param str description:
        :param int team:
        :param int creator:
        :param list[int] imagesets:
        :param list[int] annotationtype_set:
        :param str id2: id
        :param str name2: name
        :param str name__contains: name__contains
        :param str description2: description
        :param str description__contains: description__contains
        :param str team2: team
        :param str creator2: creator
        :param str imagesets2: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_product_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_product_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_product_with_http_info(self, id, **kwargs):  # noqa: E501
        """update_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str name:
        :param str description:
        :param int team:
        :param int creator:
        :param list[int] imagesets:
        :param list[int] annotationtype_set:
        :param str id2: id
        :param str name2: name
        :param str name__contains: name__contains
        :param str description2: description
        :param str description__contains: description__contains
        :param str team2: team
        :param str creator2: creator
        :param str imagesets2: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'description', 'team', 'creator', 'imagesets', 'annotationtype_set', 'id2', 'name2', 'name__contains', 'description2', 'description__contains', 'team2', 'creator2', 'imagesets2', 'annotationtype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name2' in params:
            query_params.append(('name', params['name2']))  # noqa: E501
        if 'name__contains' in params:
            query_params.append(('name__contains', params['name__contains']))  # noqa: E501
        if 'description2' in params:
            query_params.append(('description', params['description2']))  # noqa: E501
        if 'description__contains' in params:
            query_params.append(('description__contains', params['description__contains']))  # noqa: E501
        if 'team2' in params:
            query_params.append(('team', params['team2']))  # noqa: E501
        if 'creator2' in params:
            query_params.append(('creator', params['creator2']))  # noqa: E501
        if 'imagesets2' in params:
            query_params.append(('imagesets', params['imagesets2']))  # noqa: E501
        if 'annotationtype' in params:
            query_params.append(('annotationtype', params['annotationtype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/administration/products/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_product(self, id, **kwargs):  # noqa: E501
        """update_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str name:
        :param str description:
        :param int team:
        :param int creator:
        :param list[int] imagesets:
        :param list[int] annotationtype_set:
        :param str id2: id
        :param str name2: name
        :param str name__contains: name__contains
        :param str description2: description
        :param str description__contains: description__contains
        :param str team2: team
        :param str creator2: creator
        :param str imagesets2: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_product_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_product_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_product_with_http_info(self, id, **kwargs):  # noqa: E501
        """update_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_product_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str name:
        :param str description:
        :param int team:
        :param int creator:
        :param list[int] imagesets:
        :param list[int] annotationtype_set:
        :param str id2: id
        :param str name2: name
        :param str name__contains: name__contains
        :param str description2: description
        :param str description__contains: description__contains
        :param str team2: team
        :param str creator2: creator
        :param str imagesets2: imagesets
        :param str annotationtype: annotationtype
        :return: Product
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'name', 'description', 'team', 'creator', 'imagesets', 'annotationtype_set', 'id2', 'name2', 'name__contains', 'description2', 'description__contains', 'team2', 'creator2', 'imagesets2', 'annotationtype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'name2' in params:
            query_params.append(('name', params['name2']))  # noqa: E501
        if 'name__contains' in params:
            query_params.append(('name__contains', params['name__contains']))  # noqa: E501
        if 'description2' in params:
            query_params.append(('description', params['description2']))  # noqa: E501
        if 'description__contains' in params:
            query_params.append(('description__contains', params['description__contains']))  # noqa: E501
        if 'team2' in params:
            query_params.append(('team', params['team2']))  # noqa: E501
        if 'creator2' in params:
            query_params.append(('creator', params['creator2']))  # noqa: E501
        if 'imagesets2' in params:
            query_params.append(('imagesets', params['imagesets2']))  # noqa: E501
        if 'annotationtype' in params:
            query_params.append(('annotationtype', params['annotationtype']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501
        if 'name' in params:
            form_params.append(('name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('description', params['description']))  # noqa: E501
        if 'team' in params:
            form_params.append(('team', params['team']))  # noqa: E501
        if 'creator' in params:
            form_params.append(('creator', params['creator']))  # noqa: E501
        if 'imagesets' in params:
            form_params.append(('imagesets', params['imagesets']))  # noqa: E501
            collection_formats['imagesets'] = 'multi'  # noqa: E501
        if 'annotationtype_set' in params:
            form_params.append(('annotationtype_set', params['annotationtype_set']))  # noqa: E501
            collection_formats['annotationtype_set'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/administration/products/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Product',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
