# coding: utf-8

"""
    EXACT - API

    API to interact with the EXACT Server  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import
from exact_sync.v1.api.pagination_base_api import PaginationBaseAPI
import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from exact_sync.v1.api_client import ApiClient


class LogImageActionsApi(PaginationBaseAPI):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_log_image_action(self, **kwargs):  # noqa: E501
        """create_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_log_image_action(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body99 body:
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_log_image_action_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_log_image_action_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_log_image_action_with_http_info(self, **kwargs):  # noqa: E501
        """create_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_log_image_action_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body99 body:
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_log_image_action" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/annotations/log_image_actions/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogImageAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_log_image_action(self, **kwargs):  # noqa: E501
        """create_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_log_image_action(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int image:
        :param int user:
        :param int action:
        :param str ip:
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_log_image_action_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_log_image_action_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_log_image_action_with_http_info(self, **kwargs):  # noqa: E501
        """create_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_log_image_action_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int image:
        :param int user:
        :param int action:
        :param str ip:
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image', 'user', 'action', 'ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_log_image_action" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/annotations/log_image_actions/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogImageAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_log_image_action(self, **kwargs):  # noqa: E501
        """create_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_log_image_action(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int image:
        :param int user:
        :param int action:
        :param str ip:
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_log_image_action_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_log_image_action_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_log_image_action_with_http_info(self, **kwargs):  # noqa: E501
        """create_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_log_image_action_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int image:
        :param int user:
        :param int action:
        :param str ip:
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['image', 'user', 'action', 'ip']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_log_image_action" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/annotations/log_image_actions/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogImageAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def destroy_log_image_action(self, id, **kwargs):  # noqa: E501
        """destroy_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_log_image_action(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str id2: id
        :param str image: image
        :param str user: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip: ip
        :param str ip__contains: ip__contains
        :param str action: action
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.destroy_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.destroy_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def destroy_log_image_action_with_http_info(self, id, **kwargs):  # noqa: E501
        """destroy_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.destroy_log_image_action_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str id2: id
        :param str image: image
        :param str user: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip: ip
        :param str ip__contains: ip__contains
        :param str action: action
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'image', 'user', 'time', 'time__lte', 'time__gte', 'time__range', 'ip', 'ip__contains', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_log_image_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `destroy_log_image_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'image' in params:
            query_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501
        if 'time__lte' in params:
            query_params.append(('time__lte', params['time__lte']))  # noqa: E501
        if 'time__gte' in params:
            query_params.append(('time__gte', params['time__gte']))  # noqa: E501
        if 'time__range' in params:
            query_params.append(('time__range', params['time__range']))  # noqa: E501
        if 'ip' in params:
            query_params.append(('ip', params['ip']))  # noqa: E501
        if 'ip__contains' in params:
            query_params.append(('ip__contains', params['ip__contains']))  # noqa: E501
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/annotations/log_image_actions/{id}/', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_log_image_actions(self, pagination:bool=True, **kwargs):  # noqa: E501
        """list_log_image_actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_log_image_actions(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str id: id
        :param str image: image
        :param str user: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip: ip
        :param str ip__contains: ip__contains
        :param str action: action
        :return: LogImageActions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if pagination:
            if kwargs.get('async_req'):
                return self.list_log_image_actions_with_http_info(**kwargs)  # noqa: E501
            else:
                (data) = self.list_log_image_actions_with_http_info(**kwargs)  # noqa: E501
                return data
        else:
            return self._get_all(self.list_log_image_actions_with_http_info, **kwargs)


    def list_log_image_actions_with_http_info(self, **kwargs):  # noqa: E501
        """list_log_image_actions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_log_image_actions_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int limit: Number of results to return per page.
        :param int offset: The initial index from which to return the results.
        :param str id: id
        :param str image: image
        :param str user: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip: ip
        :param str ip__contains: ip__contains
        :param str action: action
        :return: LogImageActions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'id', 'image', 'user', 'time', 'time__lte', 'time__gte', 'time__range', 'ip', 'ip__contains', 'action']  # noqa: E501
        all_params.append('omit')
        all_params.append('fields')
        all_params.append('expand')
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_log_image_actions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501
        if 'image' in params:
            query_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501
        if 'time__lte' in params:
            query_params.append(('time__lte', params['time__lte']))  # noqa: E501
        if 'time__gte' in params:
            query_params.append(('time__gte', params['time__gte']))  # noqa: E501
        if 'time__range' in params:
            query_params.append(('time__range', params['time__range']))  # noqa: E501
        if 'ip' in params:
            query_params.append(('ip', params['ip']))  # noqa: E501
        if 'ip__contains' in params:
            query_params.append(('ip__contains', params['ip__contains']))  # noqa: E501
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'omit' in params:
            query_params.append(('omit', params['omit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E50
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
            
        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/annotations/log_image_actions/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogImageActions',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partial_update_log_image_action(self, id, **kwargs):  # noqa: E501
        """partial_update_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_log_image_action(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param Body105 body:
        :param str id2: id
        :param str image2: image
        :param str user2: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip2: ip
        :param str ip__contains: ip__contains
        :param str action2: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partial_update_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.partial_update_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def partial_update_log_image_action_with_http_info(self, id, **kwargs):  # noqa: E501
        """partial_update_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_log_image_action_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param Body105 body:
        :param str id2: id
        :param str image2: image
        :param str user2: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip2: ip
        :param str ip__contains: ip__contains
        :param str action2: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'id2', 'image2', 'user2', 'time', 'time__lte', 'time__gte', 'time__range', 'ip2', 'ip__contains', 'action2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partial_update_log_image_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `partial_update_log_image_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'image2' in params:
            query_params.append(('image', params['image2']))  # noqa: E501
        if 'user2' in params:
            query_params.append(('user', params['user2']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501
        if 'time__lte' in params:
            query_params.append(('time__lte', params['time__lte']))  # noqa: E501
        if 'time__gte' in params:
            query_params.append(('time__gte', params['time__gte']))  # noqa: E501
        if 'time__range' in params:
            query_params.append(('time__range', params['time__range']))  # noqa: E501
        if 'ip2' in params:
            query_params.append(('ip', params['ip2']))  # noqa: E501
        if 'ip__contains' in params:
            query_params.append(('ip__contains', params['ip__contains']))  # noqa: E501
        if 'action2' in params:
            query_params.append(('action', params['action2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/annotations/log_image_actions/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogImageAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partial_update_log_image_action(self, id, **kwargs):  # noqa: E501
        """partial_update_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_log_image_action(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param int image:
        :param int user:
        :param int action:
        :param str ip:
        :param str id2: id
        :param str image2: image
        :param str user2: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip2: ip
        :param str ip__contains: ip__contains
        :param str action2: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partial_update_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.partial_update_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def partial_update_log_image_action_with_http_info(self, id, **kwargs):  # noqa: E501
        """partial_update_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_log_image_action_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param int image:
        :param int user:
        :param int action:
        :param str ip:
        :param str id2: id
        :param str image2: image
        :param str user2: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip2: ip
        :param str ip__contains: ip__contains
        :param str action2: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'image', 'user', 'action', 'ip', 'id2', 'image2', 'user2', 'time', 'time__lte', 'time__gte', 'time__range', 'ip2', 'ip__contains', 'action2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partial_update_log_image_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `partial_update_log_image_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'image2' in params:
            query_params.append(('image', params['image2']))  # noqa: E501
        if 'user2' in params:
            query_params.append(('user', params['user2']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501
        if 'time__lte' in params:
            query_params.append(('time__lte', params['time__lte']))  # noqa: E501
        if 'time__gte' in params:
            query_params.append(('time__gte', params['time__gte']))  # noqa: E501
        if 'time__range' in params:
            query_params.append(('time__range', params['time__range']))  # noqa: E501
        if 'ip2' in params:
            query_params.append(('ip', params['ip2']))  # noqa: E501
        if 'ip__contains' in params:
            query_params.append(('ip__contains', params['ip__contains']))  # noqa: E501
        if 'action2' in params:
            query_params.append(('action', params['action2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/annotations/log_image_actions/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogImageAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def partial_update_log_image_action(self, id, **kwargs):  # noqa: E501
        """partial_update_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_log_image_action(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param int image:
        :param int user:
        :param int action:
        :param str ip:
        :param str id2: id
        :param str image2: image
        :param str user2: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip2: ip
        :param str ip__contains: ip__contains
        :param str action2: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.partial_update_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.partial_update_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def partial_update_log_image_action_with_http_info(self, id, **kwargs):  # noqa: E501
        """partial_update_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.partial_update_log_image_action_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param int image:
        :param int user:
        :param int action:
        :param str ip:
        :param str id2: id
        :param str image2: image
        :param str user2: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip2: ip
        :param str ip__contains: ip__contains
        :param str action2: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'image', 'user', 'action', 'ip', 'id2', 'image2', 'user2', 'time', 'time__lte', 'time__gte', 'time__range', 'ip2', 'ip__contains', 'action2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method partial_update_log_image_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `partial_update_log_image_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'image2' in params:
            query_params.append(('image', params['image2']))  # noqa: E501
        if 'user2' in params:
            query_params.append(('user', params['user2']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501
        if 'time__lte' in params:
            query_params.append(('time__lte', params['time__lte']))  # noqa: E501
        if 'time__gte' in params:
            query_params.append(('time__gte', params['time__gte']))  # noqa: E501
        if 'time__range' in params:
            query_params.append(('time__range', params['time__range']))  # noqa: E501
        if 'ip2' in params:
            query_params.append(('ip', params['ip2']))  # noqa: E501
        if 'ip__contains' in params:
            query_params.append(('ip__contains', params['ip__contains']))  # noqa: E501
        if 'action2' in params:
            query_params.append(('action', params['action2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/annotations/log_image_actions/{id}/', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogImageAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def retrieve_log_image_action(self, id, **kwargs):  # noqa: E501
        """retrieve_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_log_image_action(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str id2: id
        :param str image: image
        :param str user: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip: ip
        :param str ip__contains: ip__contains
        :param str action: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.retrieve_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.retrieve_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def retrieve_log_image_action_with_http_info(self, id, **kwargs):  # noqa: E501
        """retrieve_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.retrieve_log_image_action_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str id2: id
        :param str image: image
        :param str user: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip: ip
        :param str ip__contains: ip__contains
        :param str action: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'id2', 'image', 'user', 'time', 'time__lte', 'time__gte', 'time__range', 'ip', 'ip__contains', 'action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('omit')
        all_params.append('fields')
        all_params.append('expand')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method retrieve_log_image_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `retrieve_log_image_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'image' in params:
            query_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501
        if 'time__lte' in params:
            query_params.append(('time__lte', params['time__lte']))  # noqa: E501
        if 'time__gte' in params:
            query_params.append(('time__gte', params['time__gte']))  # noqa: E501
        if 'time__range' in params:
            query_params.append(('time__range', params['time__range']))  # noqa: E501
        if 'ip' in params:
            query_params.append(('ip', params['ip']))  # noqa: E501
        if 'ip__contains' in params:
            query_params.append(('ip__contains', params['ip__contains']))  # noqa: E501
        if 'action' in params:
            query_params.append(('action', params['action']))  # noqa: E501
        if 'omit' in params:
            query_params.append(('omit', params['omit']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E50
        if 'expand' in params:
            query_params.append(('expand', params['expand']))  # noqa: E501
            
        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/annotations/log_image_actions/{id}/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogImageAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_log_image_action(self, id, **kwargs):  # noqa: E501
        """update_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_log_image_action(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param Body102 body:
        :param str id2: id
        :param str image2: image
        :param str user2: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip2: ip
        :param str ip__contains: ip__contains
        :param str action2: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_log_image_action_with_http_info(self, id, **kwargs):  # noqa: E501
        """update_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_log_image_action_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param Body102 body:
        :param str id2: id
        :param str image2: image
        :param str user2: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip2: ip
        :param str ip__contains: ip__contains
        :param str action2: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'body', 'id2', 'image2', 'user2', 'time', 'time__lte', 'time__gte', 'time__range', 'ip2', 'ip__contains', 'action2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_log_image_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_log_image_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'image2' in params:
            query_params.append(('image', params['image2']))  # noqa: E501
        if 'user2' in params:
            query_params.append(('user', params['user2']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501
        if 'time__lte' in params:
            query_params.append(('time__lte', params['time__lte']))  # noqa: E501
        if 'time__gte' in params:
            query_params.append(('time__gte', params['time__gte']))  # noqa: E501
        if 'time__range' in params:
            query_params.append(('time__range', params['time__range']))  # noqa: E501
        if 'ip2' in params:
            query_params.append(('ip', params['ip2']))  # noqa: E501
        if 'ip__contains' in params:
            query_params.append(('ip__contains', params['ip__contains']))  # noqa: E501
        if 'action2' in params:
            query_params.append(('action', params['action2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/annotations/log_image_actions/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogImageAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_log_image_action(self, id, **kwargs):  # noqa: E501
        """update_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_log_image_action(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param int image:
        :param int user:
        :param int action:
        :param str ip:
        :param str id2: id
        :param str image2: image
        :param str user2: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip2: ip
        :param str ip__contains: ip__contains
        :param str action2: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_log_image_action_with_http_info(self, id, **kwargs):  # noqa: E501
        """update_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_log_image_action_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param int image:
        :param int user:
        :param int action:
        :param str ip:
        :param str id2: id
        :param str image2: image
        :param str user2: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip2: ip
        :param str ip__contains: ip__contains
        :param str action2: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'image', 'user', 'action', 'ip', 'id2', 'image2', 'user2', 'time', 'time__lte', 'time__gte', 'time__range', 'ip2', 'ip__contains', 'action2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_log_image_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_log_image_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'image2' in params:
            query_params.append(('image', params['image2']))  # noqa: E501
        if 'user2' in params:
            query_params.append(('user', params['user2']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501
        if 'time__lte' in params:
            query_params.append(('time__lte', params['time__lte']))  # noqa: E501
        if 'time__gte' in params:
            query_params.append(('time__gte', params['time__gte']))  # noqa: E501
        if 'time__range' in params:
            query_params.append(('time__range', params['time__range']))  # noqa: E501
        if 'ip2' in params:
            query_params.append(('ip', params['ip2']))  # noqa: E501
        if 'ip__contains' in params:
            query_params.append(('ip__contains', params['ip__contains']))  # noqa: E501
        if 'action2' in params:
            query_params.append(('action', params['action2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/annotations/log_image_actions/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogImageAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_log_image_action(self, id, **kwargs):  # noqa: E501
        """update_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_log_image_action(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param int image:
        :param int user:
        :param int action:
        :param str ip:
        :param str id2: id
        :param str image2: image
        :param str user2: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip2: ip
        :param str ip__contains: ip__contains
        :param str action2: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_log_image_action_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def update_log_image_action_with_http_info(self, id, **kwargs):  # noqa: E501
        """update_log_image_action  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_log_image_action_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param int image:
        :param int user:
        :param int action:
        :param str ip:
        :param str id2: id
        :param str image2: image
        :param str user2: user
        :param str time: time
        :param str time__lte: time__lte
        :param str time__gte: time__gte
        :param str time__range: time__range
        :param str ip2: ip
        :param str ip__contains: ip__contains
        :param str action2: action
        :return: LogImageAction
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'image', 'user', 'action', 'ip', 'id2', 'image2', 'user2', 'time', 'time__lte', 'time__gte', 'time__range', 'ip2', 'ip__contains', 'action2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_log_image_action" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_log_image_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'id2' in params:
            query_params.append(('id', params['id2']))  # noqa: E501
        if 'image2' in params:
            query_params.append(('image', params['image2']))  # noqa: E501
        if 'user2' in params:
            query_params.append(('user', params['user2']))  # noqa: E501
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501
        if 'time__lte' in params:
            query_params.append(('time__lte', params['time__lte']))  # noqa: E501
        if 'time__gte' in params:
            query_params.append(('time__gte', params['time__gte']))  # noqa: E501
        if 'time__range' in params:
            query_params.append(('time__range', params['time__range']))  # noqa: E501
        if 'ip2' in params:
            query_params.append(('ip', params['ip2']))  # noqa: E501
        if 'ip__contains' in params:
            query_params.append(('ip__contains', params['ip__contains']))  # noqa: E501
        if 'action2' in params:
            query_params.append(('action', params['action2']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501
        if 'image' in params:
            form_params.append(('image', params['image']))  # noqa: E501
        if 'user' in params:
            form_params.append(('user', params['user']))  # noqa: E501
        if 'action' in params:
            form_params.append(('action', params['action']))  # noqa: E501
        if 'ip' in params:
            form_params.append(('ip', params['ip']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/annotations/log_image_actions/{id}/', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LogImageAction',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
