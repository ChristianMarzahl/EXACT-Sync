# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PluginResultBitmap(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'bitmap': 'str',
        'channels': 'int',
        'default_alpha': 'float',
        'default_threshold': 'float',
        'meta_data': 'object',
        'name': 'str',
        'scale_max': 'float',
        'scale_min': 'float',
        'transformation_matrix': 'object',
        'pluginresultentry': 'int',
        'image': 'int'
    }

    attribute_map = {
        'id': 'id',
        'bitmap': 'bitmap',
        'channels': 'channels',
        'default_alpha': 'default_alpha',
        'default_threshold': 'default_threshold',
        'meta_data': 'meta_data',
        'name': 'name',
        'scale_max': 'scale_max',
        'scale_min': 'scale_min',
        'transformation_matrix': 'transformation_matrix',
        'pluginresultentry': 'pluginresultentry',
        'image': 'image'
    }

    def __init__(self, id=None, bitmap=None, channels=None, default_alpha=None, default_threshold=None, meta_data=None, name=None, scale_max=None, scale_min=None, transformation_matrix=None, pluginresultentry=None, image=None):  # noqa: E501
        """PluginResultBitmap - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._bitmap = None
        self._channels = None
        self._default_alpha = None
        self._default_threshold = None
        self._meta_data = None
        self._name = None
        self._scale_max = None
        self._scale_min = None
        self._transformation_matrix = None
        self._pluginresultentry = None
        self._image = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.bitmap = bitmap
        if channels is not None:
            self.channels = channels
        if default_alpha is not None:
            self.default_alpha = default_alpha
        if default_threshold is not None:
            self.default_threshold = default_threshold
        if meta_data is not None:
            self.meta_data = meta_data
        self.name = name
        if scale_max is not None:
            self.scale_max = scale_max
        if scale_min is not None:
            self.scale_min = scale_min
        if transformation_matrix is not None:
            self.transformation_matrix = transformation_matrix
        self.pluginresultentry = pluginresultentry
        self.image = image

    @property
    def id(self):
        """Gets the id of this PluginResultBitmap.  # noqa: E501


        :return: The id of this PluginResultBitmap.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PluginResultBitmap.


        :param id: The id of this PluginResultBitmap.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def bitmap(self):
        """Gets the bitmap of this PluginResultBitmap.  # noqa: E501


        :return: The bitmap of this PluginResultBitmap.  # noqa: E501
        :rtype: str
        """
        return self._bitmap

    @bitmap.setter
    def bitmap(self, bitmap):
        """Sets the bitmap of this PluginResultBitmap.


        :param bitmap: The bitmap of this PluginResultBitmap.  # noqa: E501
        :type: str
        """
        if bitmap is None:
            raise ValueError("Invalid value for `bitmap`, must not be `None`")  # noqa: E501

        self._bitmap = bitmap

    @property
    def channels(self):
        """Gets the channels of this PluginResultBitmap.  # noqa: E501


        :return: The channels of this PluginResultBitmap.  # noqa: E501
        :rtype: int
        """
        return self._channels

    @channels.setter
    def channels(self, channels):
        """Sets the channels of this PluginResultBitmap.


        :param channels: The channels of this PluginResultBitmap.  # noqa: E501
        :type: int
        """

        self._channels = channels

    @property
    def default_alpha(self):
        """Gets the default_alpha of this PluginResultBitmap.  # noqa: E501


        :return: The default_alpha of this PluginResultBitmap.  # noqa: E501
        :rtype: float
        """
        return self._default_alpha

    @default_alpha.setter
    def default_alpha(self, default_alpha):
        """Sets the default_alpha of this PluginResultBitmap.


        :param default_alpha: The default_alpha of this PluginResultBitmap.  # noqa: E501
        :type: float
        """

        self._default_alpha = default_alpha

    @property
    def default_threshold(self):
        """Gets the default_threshold of this PluginResultBitmap.  # noqa: E501


        :return: The default_threshold of this PluginResultBitmap.  # noqa: E501
        :rtype: float
        """
        return self._default_threshold

    @default_threshold.setter
    def default_threshold(self, default_threshold):
        """Sets the default_threshold of this PluginResultBitmap.


        :param default_threshold: The default_threshold of this PluginResultBitmap.  # noqa: E501
        :type: float
        """

        self._default_threshold = default_threshold

    @property
    def meta_data(self):
        """Gets the meta_data of this PluginResultBitmap.  # noqa: E501


        :return: The meta_data of this PluginResultBitmap.  # noqa: E501
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this PluginResultBitmap.


        :param meta_data: The meta_data of this PluginResultBitmap.  # noqa: E501
        :type: object
        """

        self._meta_data = meta_data

    @property
    def name(self):
        """Gets the name of this PluginResultBitmap.  # noqa: E501


        :return: The name of this PluginResultBitmap.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PluginResultBitmap.


        :param name: The name of this PluginResultBitmap.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def scale_max(self):
        """Gets the scale_max of this PluginResultBitmap.  # noqa: E501


        :return: The scale_max of this PluginResultBitmap.  # noqa: E501
        :rtype: float
        """
        return self._scale_max

    @scale_max.setter
    def scale_max(self, scale_max):
        """Sets the scale_max of this PluginResultBitmap.


        :param scale_max: The scale_max of this PluginResultBitmap.  # noqa: E501
        :type: float
        """

        self._scale_max = scale_max

    @property
    def scale_min(self):
        """Gets the scale_min of this PluginResultBitmap.  # noqa: E501


        :return: The scale_min of this PluginResultBitmap.  # noqa: E501
        :rtype: float
        """
        return self._scale_min

    @scale_min.setter
    def scale_min(self, scale_min):
        """Sets the scale_min of this PluginResultBitmap.


        :param scale_min: The scale_min of this PluginResultBitmap.  # noqa: E501
        :type: float
        """

        self._scale_min = scale_min

    @property
    def transformation_matrix(self):
        """Gets the transformation_matrix of this PluginResultBitmap.  # noqa: E501


        :return: The transformation_matrix of this PluginResultBitmap.  # noqa: E501
        :rtype: object
        """
        return self._transformation_matrix

    @transformation_matrix.setter
    def transformation_matrix(self, transformation_matrix):
        """Sets the transformation_matrix of this PluginResultBitmap.


        :param transformation_matrix: The transformation_matrix of this PluginResultBitmap.  # noqa: E501
        :type: object
        """

        self._transformation_matrix = transformation_matrix

    @property
    def pluginresultentry(self):
        """Gets the pluginresultentry of this PluginResultBitmap.  # noqa: E501


        :return: The pluginresultentry of this PluginResultBitmap.  # noqa: E501
        :rtype: int
        """
        return self._pluginresultentry

    @pluginresultentry.setter
    def pluginresultentry(self, pluginresultentry):
        """Sets the pluginresultentry of this PluginResultBitmap.


        :param pluginresultentry: The pluginresultentry of this PluginResultBitmap.  # noqa: E501
        :type: int
        """
        if pluginresultentry is None:
            raise ValueError("Invalid value for `pluginresultentry`, must not be `None`")  # noqa: E501

        self._pluginresultentry = pluginresultentry

    @property
    def image(self):
        """Gets the image of this PluginResultBitmap.  # noqa: E501


        :return: The image of this PluginResultBitmap.  # noqa: E501
        :rtype: int
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this PluginResultBitmap.


        :param image: The image of this PluginResultBitmap.  # noqa: E501
        :type: int
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PluginResultBitmap, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PluginResultBitmap):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
