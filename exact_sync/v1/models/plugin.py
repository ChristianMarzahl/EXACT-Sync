# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Plugin(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'author': 'str',
        'contact': 'str',
        'abouturl': 'str',
        'icon': 'str',
        'products': 'list[int]',
        'results': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'author': 'author',
        'contact': 'contact',
        'abouturl': 'abouturl',
        'icon': 'icon',
        'products': 'products',
        'results': 'results'
    }

    def __init__(self, id=None, name=None, author=None, contact=None, abouturl=None, icon=None, products=None, results=None):  # noqa: E501
        """Plugin - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._author = None
        self._contact = None
        self._abouturl = None
        self._icon = None
        self._products = None
        self._results = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.author = author
        self.contact = contact
        self.abouturl = abouturl
        self.icon = icon
        self.products = products
        self.results = results

    @property
    def id(self):
        """Gets the id of this Plugin.  # noqa: E501


        :return: The id of this Plugin.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Plugin.


        :param id: The id of this Plugin.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Plugin.  # noqa: E501


        :return: The name of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Plugin.


        :param name: The name of this Plugin.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def author(self):
        """Gets the author of this Plugin.  # noqa: E501


        :return: The author of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Plugin.


        :param author: The author of this Plugin.  # noqa: E501
        :type: str
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def contact(self):
        """Gets the contact of this Plugin.  # noqa: E501


        :return: The contact of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this Plugin.


        :param contact: The contact of this Plugin.  # noqa: E501
        :type: str
        """
        if contact is None:
            raise ValueError("Invalid value for `contact`, must not be `None`")  # noqa: E501

        self._contact = contact

    @property
    def abouturl(self):
        """Gets the abouturl of this Plugin.  # noqa: E501


        :return: The abouturl of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._abouturl

    @abouturl.setter
    def abouturl(self, abouturl):
        """Sets the abouturl of this Plugin.


        :param abouturl: The abouturl of this Plugin.  # noqa: E501
        :type: str
        """
        if abouturl is None:
            raise ValueError("Invalid value for `abouturl`, must not be `None`")  # noqa: E501

        self._abouturl = abouturl

    @property
    def icon(self):
        """Gets the icon of this Plugin.  # noqa: E501


        :return: The icon of this Plugin.  # noqa: E501
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon):
        """Sets the icon of this Plugin.


        :param icon: The icon of this Plugin.  # noqa: E501
        :type: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501

        self._icon = icon

    @property
    def products(self):
        """Gets the products of this Plugin.  # noqa: E501


        :return: The products of this Plugin.  # noqa: E501
        :rtype: list[int]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this Plugin.


        :param products: The products of this Plugin.  # noqa: E501
        :type: list[int]
        """
        if products is None:
            raise ValueError("Invalid value for `products`, must not be `None`")  # noqa: E501

        self._products = products

    @property
    def results(self):
        """Gets the results of this Plugin.  # noqa: E501


        :return: The results of this Plugin.  # noqa: E501
        :rtype: list[int]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this Plugin.


        :param results: The results of this Plugin.  # noqa: E501
        :type: list[int]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")  # noqa: E501

        self._results = results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Plugin, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Plugin):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
