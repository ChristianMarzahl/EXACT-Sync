# coding: utf-8

"""
    EXACT - API

    API to interact with the EXACT Server  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401
from enum import Enum, IntEnum
import six


class SlideInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """

    swagger_types = {
        'id': 'int',
        'levels': 'int',
        'level_downsamples': 'list[float]',
        'level_dimensions': 'list[int]',
        'level_tiles': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'levels': 'levels',
        'level_dimensions': 'level_dimensions',
        'level_downsamples': 'level_downsamples',
        'level_tiles': 'level_tiles'
    }

    def __init__(self, id=None, levels=None, level_downsamples=None, level_dimensions=None, level_tiles=None):  # noqa: E501
        """Image - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._levels = None
        self._level_downsamples = None
        self._level_dimensions = None
        if id is not None:
            self.id = id
        if levels is not None:
            self.levels = levels
        if level_downsamples is not None:
            self.level_downsamples = level_downsamples
        if level_dimensions is not None:
            self.level_dimensions = level_dimensions
        if level_tiles is not None:
            self.level_tiles = level_tiles

    @property
    def id(self):
        """Gets the id of this Slide.  # noqa: E501


        :return: The id of this Slide.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Slide.


        :param id: The id of this Slide.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def levels(self):
        """Gets the levels of this Slide.  # noqa: E501


        :return: The levels of this Slide.  # noqa: E501
        :rtype: str
        """
        return self._levels

    @levels.setter
    def levels(self, levels):
        """Sets the name of this Image.


        :param levels: The levels of this Slide.  # noqa: E501
        :type: str
        """
        if levels is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._levels = levels

    @property
    def level_downsamples(self):
        """Gets the level_downsamples of this Image.  # noqa: E501


        :return: The level_downsamples of this Image.  # noqa: E501
        :rtype: str
        """
        return self._level_downsamples

    @level_downsamples.setter
    def level_downsamples(self, level_downsamples):
        """Sets the level_downsamples of this Image.


        :param level_downsamples: The level_downsamples of this Image.  # noqa: E501
        :type: str
        """
        if level_downsamples is None:
            raise ValueError("Invalid value for `level_downsamples`, must not be `None`")  # noqa: E501

        self._level_downsamples = level_downsamples

    @property
    def level_dimensions(self):
        """Gets the level_dimensions of this Image.  # noqa: E501


        :return: The level_dimensions of this Image.  # noqa: E501
        :rtype: datetime
        """
        return self._level_dimensions

    @level_dimensions.setter
    def level_dimensions(self, level_dimensions):
        """Sets the time of this Image.


        :param time: The level_dimensions of this Image.  # noqa: E501
        :type: datetime
        """

        self._level_dimensions = level_dimensions

    @property
    def level_tiles(self):
        """Gets the level_tiles of this Image.  # noqa: E501


        :return: The level_tiles of this Image.  # noqa: E501
        :rtype: array[int]
        """
        return self._level_tiles

    @level_tiles.setter
    def level_tiles(self, level_tiles):
        """Sets the time of this Image.


        :param time: The level_tiles of this Image.  # noqa: E501
        :type: datetime
        """

        self._level_tiles = level_tiles

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Image, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
