# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PluginResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'image': 'int',
        'job': 'int',
        'plugin': 'int',
        'default_alpha': 'float',
        'completed_time': 'datetime',
        'created_time': 'datetime',
        'entries': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'image': 'image',
        'job': 'job',
        'plugin': 'plugin',
        'default_alpha': 'default_alpha',
        'completed_time': 'completed_time',
        'created_time': 'created_time',
        'entries': 'entries'
    }

    def __init__(self, id=None, image=None, job=None, plugin=None, completed_time=None, default_alpha=None, created_time=None, entries=None):  # noqa: E501
        """PluginResult - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._image = None
        self._job = None
        self._plugin = None
        self._completed_time = None
        self._created_time = None
        self._default_alpha = None
        self._entries = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.image = image
        if job is not None:
            self.job = job
        self.plugin = plugin
        if completed_time is not None:
            self.completed_time = completed_time
        if created_time is not None:
            self.created_time = created_time
        if default_alpha is not None:
            self.default_alpha = default_alpha
        self.entries = entries

    @property
    def id(self):
        """Gets the id of this PluginResult.  # noqa: E501


        :return: The id of this PluginResult.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PluginResult.


        :param id: The id of this PluginResult.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this PluginResult.  # noqa: E501


        :return: The image of this PluginResult.  # noqa: E501
        :rtype: int
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this PluginResult.


        :param image: The image of this PluginResult.  # noqa: E501
        :type: int
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def job(self):
        """Gets the job of this PluginResult.  # noqa: E501


        :return: The job of this PluginResult.  # noqa: E501
        :rtype: int
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this PluginResult.


        :param job: The job of this PluginResult.  # noqa: E501
        :type: int
        """

        self._job = job

    @property
    def plugin(self):
        """Gets the plugin of this PluginResult.  # noqa: E501


        :return: The plugin of this PluginResult.  # noqa: E501
        :rtype: int
        """
        return self._plugin

    @plugin.setter
    def plugin(self, plugin):
        """Sets the plugin of this PluginResult.


        :param plugin: The plugin of this PluginResult.  # noqa: E501
        :type: int
        """
        if plugin is None:
            raise ValueError("Invalid value for `plugin`, must not be `None`")  # noqa: E501

        self._plugin = plugin

    @property
    def completed_time(self):
        """Gets the completed_time of this PluginResult.  # noqa: E501


        :return: The completed_time of this PluginResult.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_time

    @completed_time.setter
    def completed_time(self, completed_time):
        """Sets the completed_time of this PluginResult.


        :param completed_time: The completed_time of this PluginResult.  # noqa: E501
        :type: datetime
        """

        self._completed_time = completed_time



    @property
    def default_alpha(self):
        """Gets the default_alpha of this PluginResult.  # noqa: E501


        :return: The default_alpha of this PluginResult.  # noqa: E501
        :rtype: datetime
        """
        return self._default_alpha

    @default_alpha.setter
    def default_alpha(self, default_alpha):
        """Sets the default_alpha of this PluginResult.


        :param default_alpha: The default_alpha of this PluginResult.  # noqa: E501
        :type: datetime
        """

        self._default_alpha = default_alpha


    @property
    def created_time(self):
        """Gets the created_time of this PluginResult.  # noqa: E501


        :return: The created_time of this PluginResult.  # noqa: E501
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this PluginResult.


        :param created_time: The created_time of this PluginResult.  # noqa: E501
        :type: datetime
        """

        self._created_time = created_time

    @property
    def entries(self):
        """Gets the entries of this PluginResult.  # noqa: E501


        :return: The entries of this PluginResult.  # noqa: E501
        :rtype: list[int]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this PluginResult.


        :param entries: The entries of this PluginResult.  # noqa: E501
        :type: list[int]
        """
        if entries is None:
            raise ValueError("Invalid value for `entries`, must not be `None`")  # noqa: E501

        self._entries = entries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PluginResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PluginResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
